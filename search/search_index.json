{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u041e\u0442\u0447\u0451\u0442\u044b \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u0431\u0430\u043a\u0430\u043b\u0430\u0432\u0440\u0438\u0430\u0442\u0430 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0430 \u0418\u0422\u041c\u041e \u0414\u0430\u043d\u0438\u0438\u043b\u0430 \u0422\u0430\u044f\u043a\u0438\u043d\u0430, \u041a33392.","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#_1","text":"\u041e\u0442\u0447\u0451\u0442\u044b \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u0431\u0430\u043a\u0430\u043b\u0430\u0432\u0440\u0438\u0430\u0442\u0430 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442\u0430 \u0418\u0422\u041c\u041e \u0414\u0430\u043d\u0438\u0438\u043b\u0430 \u0422\u0430\u044f\u043a\u0438\u043d\u0430, \u041a33392.","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"lab-1/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 #1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 socket \u0438 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0441 \u043d\u0430\u0448\u0438\u043c \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u0441 \u043f\u043e\u0440\u0442\u043e\u043c 3001. import socket # creating socket obj, where # AF_INET - IPv4 family # SOCK_DGRAM - UDP s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.bind(('', 3001)) \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 1024 \u0431\u0430\u0439\u0442\u0430 \u0438 ip-\u0430\u0434\u0440\u0435\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 utf-8 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439. # receive data (1024 bytes) and ip address from a client data, client_addr = s.recvfrom(1024) print(data.decode()) \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u0432\u0435\u0442: \"Hello, Client!\". # send a response to the client s.sendto(b\"Hello, Client!\", client_addr) \u041a\u043b\u0438\u0435\u043d\u0442 \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 socket. import socket # creating socket obj, where # AF_INET - IPv4 family # SOCK_DGRAM - UDP s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u043d\u0430\u043c \u043f\u043e\u0440\u0442\u043e\u043c 3001. # send bytes to the server address s.sendto(b\"Hello, Server!\", ('', 3001)) \u0416\u0434\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0435\u0433\u043e. # wait for server reply data = s.recv(1024) print(data.decode()) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 #2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0441 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u043c TCP \u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u043a \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0445\u043e\u0441\u0442\u0443 \u0441 \u043f\u043e\u0440\u0442\u043e\u043c 3001. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 listen \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0440\u0435\u0436\u0438\u043c \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0440\u0430\u0432\u043d\u043e\u043c\u0443 1. import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('', 3001)) s.listen(1) \u041e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u043e\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0441\u044f, \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435-\u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443. conn, addr = s.accept() conn.send(b\"Enter a b sides of right triangle:\") \u041e\u0434\u0438\u0434\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0439 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b. data = conn.recv(1024) a, b = list(map(int, data.decode().split())) hypotenuse = (a**2 + b**2) ** 0.5 conn.sendall(str(hypotenuse).encode()) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442 \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a TCP \u0441\u0435\u0440\u0432\u0435\u0440\u0443. import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('', 3001)) \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435-\u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443. msg = s.recv(1024).decode() print(msg) \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u0445 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. data = input().encode() s.send(data) print(s.recv(1024).decode()) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 #3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 \u0421\u043e\u0437\u0434\u0430\u0435\u043c TCP \u0441\u043e\u043a\u0435\u0442 \u0441 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u043e\u0439 \u043a \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0445\u043e\u0441\u0442\u0443. \u041a\u043e\u0433\u0434\u0430 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c http \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('', 3001)) s.listen(1) conn, addr = s.accept() http_data = create_http_response(open(\"./index.html\").read()) conn.sendall(http_data) conn.close() \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0449\u0430\u044f http \u043e\u0442\u0432\u0435\u0442. def create_http_response(body: str) -> bytes: header = f\"HTTP/1.2 200 OK\\nContent-Type: text/html; charset=utf-8\\nContent-Length: {len(body)}\" request = f\"{header}\\n\\n{body}\" return request.encode() \u041a\u043b\u0438\u0435\u043d\u0442 \u0421\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c\u0441\u044f \u0441 TCP \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442. import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('', 3001)) data = read_server_data(s) body = read_http_body(data) print(body) \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u0447\u0438\u0442\u0430\u044e\u0449\u0430\u044f \u043e\u0442\u0432\u0435\u0442 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u043e \u0447\u0430\u043d\u043a\u0430\u043c def read_server_data(s: socket.socket, chunk_size=1024) -> bytes: result = b\"\" while True: data = s.recv(chunk_size) if not data: break result += data return result \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 body \u0441 http \u043e\u0442\u0432\u0435\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. def read_http_body(response: bytes) -> str: lines = response.decode().splitlines() body_start = next((i for i, line in enumerate(lines) if line == \"\"), -1) if body_start == -1: raise ValueError(\"Invalid HTTP\") return \"\\n\".join(lines[body_start + 1:]) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 #4 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u2013 100% \u0431\u0430\u043b\u043b\u043e\u0432, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP \u2013 80%. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0421\u0435\u0440\u0432\u0435\u0440 \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. import os import socket from threading import Thread from constants import separator \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043a\u043e\u0434\u0430. \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f TCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e connections, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u0443\u0434\u0435\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 thread \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # make port reusable s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind(('', 3001)) s.listen(os.cpu_count()) connections: set[socket.socket] = set() while True: conn, addr = s.accept() print(f\"{addr} has connected.\") connections.add(conn) # thread for listening client's messages t = Thread(target=listen_for_client, args=(conn,)) t.start() \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u043c\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. def listen_for_client(conn): global connections while True: try: msg = conn.recv(1024).decode() except Exception as e: # client no longer connected print(f\"client no longer connected.\") connections.remove(conn) else: msg = msg.replace(separator, \": \") # iterate over all connected sockets for client_socket in connections: client_socket.sendall(msg.encode()) \u041a\u043b\u0438\u0435\u043d\u0442 import socket import random from threading import Thread from datetime import datetime from colorama import Fore from constants import separator, colors \u0412 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e\u0434\u043a\u043b\u0431\u0447\u0430\u0435\u043c\u0441\u044f \u043a TCP \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0446\u0432\u0435\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0447\u0442\u043e\u0431\u044b \u0432 \u0447\u0430\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u044b\u0434\u0435\u043b\u044f\u043b\u0438\u0441\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0446\u0432\u0435\u0442\u043e\u043c. \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0438\u043c\u044f. \u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e, \u0441\u043e\u0437\u0434\u0430\u0435\u043c thread, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('', 3001)) # choose a random color for the client user_color = random.choice(colors) username = input(\"Enter your name: \") # make a thread that listens for messages to this client & print them t = Thread(target=listen_for_messages, args=(s,)) t.start() \u0412 \u044d\u0442\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. def listen_for_messages(s: socket): try: while True: msg = s.recv(1024).decode() print(msg) finally: s.close() \u0414\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430. while True: msg = input() if msg.lower() == '/exit': break date_now = datetime.now().strftime('%Y-%m-%d %H:%M:%S') s.sendall(f\"{user_color}[{date_now}] {username}{separator}{msg}{Fore.RESET}\".encode()) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 #5 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 - \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0434\u0430\u0442\u0430-\u043a\u043b\u0430\u0441\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f http-\u0437\u0430\u043f\u0440\u043e\u0441 \u0438 http-\u043e\u0442\u0432\u0435\u0442. \u0414\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c defaultdict \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 collections . import socket import json from collections import defaultdict from dataclasses import dataclass from http import HTTPStatus from urllib.parse import urlparse, parse_qs DB = defaultdict(list) @dataclass class HTTPRequest: method: str url: str protocol: str headers: dict[str, str] body: bytes @dataclass class HTTPResponse: status: int headers: dict[str, str] body: bytes protocol: str = \"HTTP/1.2\" def __bytes__(self): headers_str = \"\\n\".join(f\"{key}: {val}\" for key, val in self.headers.items()) return f\"{self.protocol} {self.status} {HTTPStatus(self.status).phrase}\\n{headers_str}\\n\\n\".encode() + self.body \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0442\u0430\u043a\u0436\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0441 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u043c TCP. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f serve_forever , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u0436\u0435 \u0431\u0438\u043d\u0434\u0438\u0442\u0441\u044f \u0445\u043e\u0441\u0442 \u0438 \u043f\u043e\u0440\u0442. \u0412\u0441\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044f serve_client . class MyHTTPServer: def __init__(self, host: str, port: int) -> None: self.host = host self.port = port self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) def serve_forever(self): self.socket.bind((self.host, self.port)) self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.socket.listen() while True: conn, addr = self.socket.accept() self.serve_client(conn) def serve_client(self, conn: socket.socket): req = self.parse_request(conn) resp = self.handle_request(req) self.send_response(conn, resp) if conn: conn.close() \u0412 parse_request \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432 \u043d\u0443\u0436\u043d\u044b\u0439 \u043d\u0430\u043c \u0432\u0438\u0434 HTTPRequest . def parse_request(self, conn: socket.socket) -> HTTPRequest: lines = conn.recv(1024*10).splitlines() # parse first line try: method, url, protocol = lines[0].decode().strip().split() except IndexError: raise Exception(\"First line is incorrect\") headers, body_start_index = self.parse_headers(lines) body = b\"\".join(lines[body_start_index + 2:]) return HTTPRequest(method, url, protocol, headers, body) parse_headers \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438. def parse_headers(self, lines) -> dict[str, str]: headers: dict[str, str] = {} index = 1 req_generator = ( (n, i.decode()) for n, i in enumerate(lines[1:], 1) ) while (data := next(req_generator, None)) is not None and data[1].strip() != \"\": index, header = data try: key, val = header.split(\":\", 1) headers[key.lower()] = val.strip() except ValueError: raise Exception(\"Headers are incorrect\") return headers, index \u0414\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441. \u0412 \u043d\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432\u0441\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 - \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0439 HTTPResponse . def handle_request(self, req: HTTPRequest) -> HTTPResponse: parsed_url = urlparse(req.url) query = parse_qs(parsed_url.query) print(req) if req.method == \"GET\" and parsed_url.path == \"/scores\": if \"subject\" not in query: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"desc\": \"you need to specify subject param\"}).encode() ) return HTTPResponse( status=200, headers={\"Content-Type\": \"text/html; charset=utf-8\"}, body=f\"\"\" <!DOCTYPE html><html><body> <table> <tr><th>{query['subject'][0]}</th></tr> <tr> <td>{\"</td><td>\".join(DB[query['subject'][0]])}</td> </tr> </table> </body></html>\"\"\".encode() ) elif req.method == \"POST\" and parsed_url.path == \"/subject\": if \"name\" not in query: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"desc\": \"you need to specify name param\"}).encode() ) if \"score\" not in query: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"desc\": \"you need to specify score param\"}).encode() ) DB[query[\"name\"][0]].append(query[\"score\"][0]) return HTTPResponse(status=200, headers={}, body=b\"\") return HTTPResponse(status=400, headers={}, body=b\"\") \u0422\u0430\u043a \u043f\u0440\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430. server = MyHTTPServer(\"localhost\", 3004) try: server.serve_forever() except KeyboardInterrupt: pass \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0443. GET /scores?subject=test \u0412\u043d\u0435\u0441\u0442\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0443. POST /subject?name=test&score=10","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #1"},{"location":"lab-1/#1","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #1"},{"location":"lab-1/#1_1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 #1"},{"location":"lab-1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab-1/#_2","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 socket \u0438 \u0441\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0441 \u043d\u0430\u0448\u0438\u043c \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u0441 \u043f\u043e\u0440\u0442\u043e\u043c 3001. import socket # creating socket obj, where # AF_INET - IPv4 family # SOCK_DGRAM - UDP s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.bind(('', 3001)) \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u0437\u043c\u0435\u0440\u043e\u043c 1024 \u0431\u0430\u0439\u0442\u0430 \u0438 ip-\u0430\u0434\u0440\u0435\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 utf-8 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u043e\u0439. # receive data (1024 bytes) and ip address from a client data, client_addr = s.recvfrom(1024) print(data.decode()) \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u0432\u0435\u0442: \"Hello, Client!\". # send a response to the client s.sendto(b\"Hello, Client!\", client_addr) \u041a\u043b\u0438\u0435\u043d\u0442 \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 socket. import socket # creating socket obj, where # AF_INET - IPv4 family # SOCK_DGRAM - UDP s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u043c \u043d\u0430\u043c \u043f\u043e\u0440\u0442\u043e\u043c 3001. # send bytes to the server address s.sendto(b\"Hello, Server!\", ('', 3001)) \u0416\u0434\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0435\u0433\u043e. # wait for server reply data = s.recv(1024) print(data.decode())","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab-1/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 #2"},{"location":"lab-1/#_3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab-1/#_4","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0441 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u043c TCP \u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u043a \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0445\u043e\u0441\u0442\u0443 \u0441 \u043f\u043e\u0440\u0442\u043e\u043c 3001. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 listen \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0440\u0435\u0436\u0438\u043c \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0440\u0430\u0432\u043d\u043e\u043c\u0443 1. import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('', 3001)) s.listen(1) \u041e\u0436\u0438\u0434\u0430\u0435\u043c \u043f\u043e\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041f\u043e\u0441\u043b\u0435 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0441\u044f, \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435-\u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443. conn, addr = s.accept() conn.send(b\"Enter a b sides of right triangle:\") \u041e\u0434\u0438\u0434\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0439 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b. data = conn.recv(1024) a, b = list(map(int, data.decode().split())) hypotenuse = (a**2 + b**2) ** 0.5 conn.sendall(str(hypotenuse).encode()) conn.close() \u041a\u043b\u0438\u0435\u043d\u0442 \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a TCP \u0441\u0435\u0440\u0432\u0435\u0440\u0443. import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('', 3001)) \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435-\u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0443. msg = s.recv(1024).decode() print(msg) \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u0445 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440. \u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. data = input().encode() s.send(data) print(s.recv(1024).decode())","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab-1/#3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 #3"},{"location":"lab-1/#_5","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab-1/#_6","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u0421\u043e\u0437\u0434\u0430\u0435\u043c TCP \u0441\u043e\u043a\u0435\u0442 \u0441 \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u043e\u0439 \u043a \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0445\u043e\u0441\u0442\u0443. \u041a\u043e\u0433\u0434\u0430 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c http \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('', 3001)) s.listen(1) conn, addr = s.accept() http_data = create_http_response(open(\"./index.html\").read()) conn.sendall(http_data) conn.close() \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u044e\u0449\u0430\u044f http \u043e\u0442\u0432\u0435\u0442. def create_http_response(body: str) -> bytes: header = f\"HTTP/1.2 200 OK\\nContent-Type: text/html; charset=utf-8\\nContent-Length: {len(body)}\" request = f\"{header}\\n\\n{body}\" return request.encode() \u041a\u043b\u0438\u0435\u043d\u0442 \u0421\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u043c\u0441\u044f \u0441 TCP \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442. import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('', 3001)) data = read_server_data(s) body = read_http_body(data) print(body) \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u0447\u0438\u0442\u0430\u044e\u0449\u0430\u044f \u043e\u0442\u0432\u0435\u0442 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u043e \u0447\u0430\u043d\u043a\u0430\u043c def read_server_data(s: socket.socket, chunk_size=1024) -> bytes: result = b\"\" while True: data = s.recv(chunk_size) if not data: break result += data return result \u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 body \u0441 http \u043e\u0442\u0432\u0435\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. def read_http_body(response: bytes) -> str: lines = response.decode().splitlines() body_start = next((i for i, line in enumerate(lines) if line == \"\"), -1) if body_start == -1: raise ValueError(\"Invalid HTTP\") return \"\\n\".join(lines[body_start + 1:])","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab-1/#4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 #4"},{"location":"lab-1/#_7","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP \u2013 100% \u0431\u0430\u043b\u043b\u043e\u0432, \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP \u2013 80%. \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e UDP, thearding \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441 TCP \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0418 \u043f\u0440\u0438\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432\u0441\u0435\u043c \u044e\u0437\u0435\u0440\u0430\u043c \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u044e\u0437\u0435\u0440\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab-1/#_8","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. import os import socket from threading import Thread from constants import separator \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043a\u043e\u0434\u0430. \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f TCP \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043e\u0431\u044a\u044f\u0432\u043b\u044f\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e connections, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u0443\u0434\u0435\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 thread \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # make port reusable s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind(('', 3001)) s.listen(os.cpu_count()) connections: set[socket.socket] = set() while True: conn, addr = s.accept() print(f\"{addr} has connected.\") connections.add(conn) # thread for listening client's messages t = Thread(target=listen_for_client, args=(conn,)) t.start() \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u043c\u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. def listen_for_client(conn): global connections while True: try: msg = conn.recv(1024).decode() except Exception as e: # client no longer connected print(f\"client no longer connected.\") connections.remove(conn) else: msg = msg.replace(separator, \": \") # iterate over all connected sockets for client_socket in connections: client_socket.sendall(msg.encode()) \u041a\u043b\u0438\u0435\u043d\u0442 import socket import random from threading import Thread from datetime import datetime from colorama import Fore from constants import separator, colors \u0412 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u043e\u0434\u043a\u043b\u0431\u0447\u0430\u0435\u043c\u0441\u044f \u043a TCP \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0446\u0432\u0435\u0442 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0447\u0442\u043e\u0431\u044b \u0432 \u0447\u0430\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u044b\u0434\u0435\u043b\u044f\u043b\u0438\u0441\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0446\u0432\u0435\u0442\u043e\u043c. \u0417\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0438\u043c\u044f. \u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e, \u0441\u043e\u0437\u0434\u0430\u0435\u043c thread, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0434\u0430\u043d\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('', 3001)) # choose a random color for the client user_color = random.choice(colors) username = input(\"Enter your name: \") # make a thread that listens for messages to this client & print them t = Thread(target=listen_for_messages, args=(s,)) t.start() \u0412 \u044d\u0442\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. def listen_for_messages(s: socket): try: while True: msg = s.recv(1024).decode() print(msg) finally: s.close() \u0414\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430. while True: msg = input() if msg.lower() == '/exit': break date_now = datetime.now().strftime('%Y-%m-%d %H:%M:%S') s.sendall(f\"{user_color}[{date_now}] {username}{separator}{msg}{Fore.RESET}\".encode())","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab-1/#5","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 #5"},{"location":"lab-1/#_9","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 - \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435"},{"location":"lab-1/#_10","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0434\u0430\u0442\u0430-\u043a\u043b\u0430\u0441\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0438\u0437 \u0441\u0435\u0431\u044f http-\u0437\u0430\u043f\u0440\u043e\u0441 \u0438 http-\u043e\u0442\u0432\u0435\u0442. \u0414\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u043e \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0435 \u0431\u0443\u0434\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c defaultdict \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 collections . import socket import json from collections import defaultdict from dataclasses import dataclass from http import HTTPStatus from urllib.parse import urlparse, parse_qs DB = defaultdict(list) @dataclass class HTTPRequest: method: str url: str protocol: str headers: dict[str, str] body: bytes @dataclass class HTTPResponse: status: int headers: dict[str, str] body: bytes protocol: str = \"HTTP/1.2\" def __bytes__(self): headers_str = \"\\n\".join(f\"{key}: {val}\" for key, val in self.headers.items()) return f\"{self.protocol} {self.status} {HTTPStatus(self.status).phrase}\\n{headers_str}\\n\\n\".encode() + self.body \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043b\u0430\u0441\u0441\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0442\u0430\u043a\u0436\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u0441 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u043c TCP. \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f serve_forever , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u0436\u0435 \u0431\u0438\u043d\u0434\u0438\u0442\u0441\u044f \u0445\u043e\u0441\u0442 \u0438 \u043f\u043e\u0440\u0442. \u0412\u0441\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044f serve_client . class MyHTTPServer: def __init__(self, host: str, port: int) -> None: self.host = host self.port = port self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) def serve_forever(self): self.socket.bind((self.host, self.port)) self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self.socket.listen() while True: conn, addr = self.socket.accept() self.serve_client(conn) def serve_client(self, conn: socket.socket): req = self.parse_request(conn) resp = self.handle_request(req) self.send_response(conn, resp) if conn: conn.close() \u0412 parse_request \u043c\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u0432 \u043d\u0443\u0436\u043d\u044b\u0439 \u043d\u0430\u043c \u0432\u0438\u0434 HTTPRequest . def parse_request(self, conn: socket.socket) -> HTTPRequest: lines = conn.recv(1024*10).splitlines() # parse first line try: method, url, protocol = lines[0].decode().strip().split() except IndexError: raise Exception(\"First line is incorrect\") headers, body_start_index = self.parse_headers(lines) body = b\"\".join(lines[body_start_index + 2:]) return HTTPRequest(method, url, protocol, headers, body) parse_headers \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438. def parse_headers(self, lines) -> dict[str, str]: headers: dict[str, str] = {} index = 1 req_generator = ( (n, i.decode()) for n, i in enumerate(lines[1:], 1) ) while (data := next(req_generator, None)) is not None and data[1].strip() != \"\": index, header = data try: key, val = header.split(\":\", 1) headers[key.lower()] = val.strip() except ValueError: raise Exception(\"Headers are incorrect\") return headers, index \u0414\u0430\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441. \u0412 \u043d\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0432\u0441\u044f \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 - \u0441\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0439 HTTPResponse . def handle_request(self, req: HTTPRequest) -> HTTPResponse: parsed_url = urlparse(req.url) query = parse_qs(parsed_url.query) print(req) if req.method == \"GET\" and parsed_url.path == \"/scores\": if \"subject\" not in query: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"desc\": \"you need to specify subject param\"}).encode() ) return HTTPResponse( status=200, headers={\"Content-Type\": \"text/html; charset=utf-8\"}, body=f\"\"\" <!DOCTYPE html><html><body> <table> <tr><th>{query['subject'][0]}</th></tr> <tr> <td>{\"</td><td>\".join(DB[query['subject'][0]])}</td> </tr> </table> </body></html>\"\"\".encode() ) elif req.method == \"POST\" and parsed_url.path == \"/subject\": if \"name\" not in query: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"desc\": \"you need to specify name param\"}).encode() ) if \"score\" not in query: return HTTPResponse( status=400, headers={\"Content-Type\": \"application/json\"}, body=json.dumps({\"desc\": \"you need to specify score param\"}).encode() ) DB[query[\"name\"][0]].append(query[\"score\"][0]) return HTTPResponse(status=200, headers={}, body=b\"\") return HTTPResponse(status=400, headers={}, body=b\"\") \u0422\u0430\u043a \u043f\u0440\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0437\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430. server = MyHTTPServer(\"localhost\", 3004) try: server.serve_forever() except KeyboardInterrupt: pass \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0443. GET /scores?subject=test \u0412\u043d\u0435\u0441\u0442\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0443. POST /subject?name=test&score=10","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"lab-2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #2 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0421\u0432\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431 \u0441\u0435\u0440\u0432\u0438\u0441 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u043e\u0432. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u0443\u043a\u0438\u043e\u043d\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0443\u043a\u0438\u0446\u043e\u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0430\u0446\u043a\u0443\u0438\u043e\u043d\u0430\u043c. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 watchlist'\u0430. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c Django \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442. python3 -m venv commerce-venv pip3 install django django-admin starproject commerce \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 auctions. ./manage.py startapp auctions \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u041c\u043e\u0434\u0435\u043b\u044c User \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. class User(AbstractUser): pass \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b Django \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0434\u0430\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432 settings.py \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443: AUTH_USER_MODEL = 'auctions.User' \u041c\u043e\u0434\u0435\u043b\u044c Listing \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0435\u043c \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0435. class Listing(models.Model): title = models.CharField(max_length=64) image = models.URLField(max_length=280, blank=True, null=True) description = models.CharField(max_length=280, blank=True, null=True) category = models.ForeignKey(\"Category\", on_delete=models.CASCADE, related_name=\"listings\", blank=True, null=True) price = models.IntegerField() user = models.ForeignKey(\"User\", on_delete=models.CASCADE) status = models.BooleanField(default=True) def __str__(self): return self.title Category \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u044b. class Category(models.Model): title = models.CharField(max_length=64) image = models.ImageField(upload_to=\"media/categories\") def __str__(self): return self.title Bid \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0430\u0432\u043a\u0430\u0445 \u043d\u0430 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0435. class Bid(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"bids\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE, related_name=\"bids\") price = models.IntegerField() def __str__(self): return f\"{self.id}. {self.user.username} bid {self.listing.title} for {self.price}\" Comment \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u043f\u043e\u0434 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10). class Comment(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"comments\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE, related_name=\"comments\") comment = models.CharField(max_length=280) rating = models.IntegerField( default=1, validators=[ MaxValueValidator(10), MinValueValidator(1) ] ) def __str__(self): return f\"{self.id}. {self.user}\" Watchlist \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0430\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. class Watchlist(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"watchlist\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE) def __str__(self): return f\"{self.id}. {self.user.username}: {self.listing.title}\" url \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0430\u0439\u043b urls.py \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043a\u043e\u0434\u043e\u043c \u0432 \u043f\u0430\u043f\u043a\u0435 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f auctions . \u041f\u043e\u043c\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0432\u0441\u0435\u0445 path , \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043f\u0443\u0442\u044c \u043a \u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u043c \u0444\u0430\u0439\u043b\u0430\u043c (\u043c\u0435\u0434\u0438\u0430 \u0444\u0430\u0439\u043b\u0430\u043c). from django.urls import path from django.conf import settings from django.conf.urls.static import static from . import views urlpatterns = [ path(\"\", views.index, name=\"index\"), path(\"login\", views.login_view, name=\"login\"), path(\"logout\", views.logout_view, name=\"logout\"), path(\"register\", views.register, name=\"register\"), path(\"categories\", views.categories, name=\"categories\"), path(\"categories/<int:category_id>\", views.category, name=\"category\"), path(\"watchlist\", views.watchlist, name=\"watchlist\"), path(\"listing/<int:listing_id>\", views.listing, name=\"listing\"), path(\"listing/create\", views.create_listing, name=\"create_listing\") ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0430 \u0434\u0430\u043d\u043d\u0430\u044f url \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f, \u0432 \u0444\u0430\u0439\u043b\u0435 commerce/urls.py \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c urlpatterns \u0442\u0430\u043a: urlpatterns = [ path(\"admin/\", admin.site.urls), path(\"\", include(\"auctions.urls\")) ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #2"},{"location":"lab-2/#2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #2"},{"location":"lab-2/#_1","text":"\u0421\u0432\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431 \u0441\u0435\u0440\u0432\u0438\u0441 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u043e\u0432. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u0430\u0443\u043a\u0438\u043e\u043d\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0443\u043a\u0438\u0446\u043e\u043d\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0430\u0446\u043a\u0443\u0438\u043e\u043d\u0430\u043c. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 watchlist'\u0430.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab-2/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"lab-2/#_3","text":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0432\u0438\u0440\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0440\u0435\u0434\u0443, \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c Django \u0438 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u043e\u0435\u043a\u0442. python3 -m venv commerce-venv pip3 install django django-admin starproject commerce \u041f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 auctions. ./manage.py startapp auctions","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"lab-2/#_4","text":"\u041c\u043e\u0434\u0435\u043b\u044c User \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. class User(AbstractUser): pass \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b Django \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b \u0434\u0430\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u0432\u0445\u043e\u0434\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432 settings.py \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443: AUTH_USER_MODEL = 'auctions.User' \u041c\u043e\u0434\u0435\u043b\u044c Listing \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0435\u043c \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0435. class Listing(models.Model): title = models.CharField(max_length=64) image = models.URLField(max_length=280, blank=True, null=True) description = models.CharField(max_length=280, blank=True, null=True) category = models.ForeignKey(\"Category\", on_delete=models.CASCADE, related_name=\"listings\", blank=True, null=True) price = models.IntegerField() user = models.ForeignKey(\"User\", on_delete=models.CASCADE) status = models.BooleanField(default=True) def __str__(self): return self.title Category \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u044b. class Category(models.Model): title = models.CharField(max_length=64) image = models.ImageField(upload_to=\"media/categories\") def __str__(self): return self.title Bid \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0430\u0432\u043a\u0430\u0445 \u043d\u0430 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0435. class Bid(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"bids\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE, related_name=\"bids\") price = models.IntegerField() def __str__(self): return f\"{self.id}. {self.user.username} bid {self.listing.title} for {self.price}\" Comment \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u043f\u043e\u0434 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10). class Comment(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"comments\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE, related_name=\"comments\") comment = models.CharField(max_length=280) rating = models.IntegerField( default=1, validators=[ MaxValueValidator(10), MinValueValidator(1) ] ) def __str__(self): return f\"{self.id}. {self.user}\" Watchlist \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0430\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. class Watchlist(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"watchlist\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE) def __str__(self): return f\"{self.id}. {self.user.username}: {self.listing.title}\"","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab-2/#url","text":"\u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0444\u0430\u0439\u043b urls.py \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043a\u043e\u0434\u043e\u043c \u0432 \u043f\u0430\u043f\u043a\u0435 \u043d\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f auctions . \u041f\u043e\u043c\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0439 \u0432\u0441\u0435\u0445 path , \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u043f\u0443\u0442\u044c \u043a \u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u043c \u0444\u0430\u0439\u043b\u0430\u043c (\u043c\u0435\u0434\u0438\u0430 \u0444\u0430\u0439\u043b\u0430\u043c). from django.urls import path from django.conf import settings from django.conf.urls.static import static from . import views urlpatterns = [ path(\"\", views.index, name=\"index\"), path(\"login\", views.login_view, name=\"login\"), path(\"logout\", views.logout_view, name=\"logout\"), path(\"register\", views.register, name=\"register\"), path(\"categories\", views.categories, name=\"categories\"), path(\"categories/<int:category_id>\", views.category, name=\"category\"), path(\"watchlist\", views.watchlist, name=\"watchlist\"), path(\"listing/<int:listing_id>\", views.listing, name=\"listing\"), path(\"listing/create\", views.create_listing, name=\"create_listing\") ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0430 \u0434\u0430\u043d\u043d\u0430\u044f url \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f, \u0432 \u0444\u0430\u0439\u043b\u0435 commerce/urls.py \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c urlpatterns \u0442\u0430\u043a: urlpatterns = [ path(\"admin/\", admin.site.urls), path(\"\", include(\"auctions.urls\")) ]","title":"url \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044f"},{"location":"lab-3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #3 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0421\u0432\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0432\u0435\u0431 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django, djangorestframework, djoser. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f models.py \u041c\u043e\u0434\u0435\u043b\u044c User \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. class User(AbstractUser): pass \u041c\u043e\u0434\u0435\u043b\u044c Listing \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0435\u043c \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0435. class Listing(models.Model): title = models.CharField(max_length=64) image = models.URLField(max_length=280, blank=True, null=True) description = models.CharField(max_length=280, blank=True, null=True) category = models.ForeignKey(\"Category\", on_delete=models.CASCADE, related_name=\"listings\", blank=True, null=True) price = models.IntegerField() user = models.ForeignKey(\"User\", on_delete=models.CASCADE) status = models.BooleanField(default=True) def __str__(self): return self.title Category \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u044b. class Category(models.Model): title = models.CharField(max_length=64) image = models.ImageField(upload_to=\"media/categories\") def __str__(self): return self.title Bid \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0430\u0432\u043a\u0430\u0445 \u043d\u0430 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0435. class Bid(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"bids\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE, related_name=\"bids\") price = models.IntegerField() def __str__(self): return f\"{self.id}. {self.user.username} bid {self.listing.title} for {self.price}\" Comment \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u043f\u043e\u0434 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10). class Comment(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"comments\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE, related_name=\"comments\") comment = models.CharField(max_length=280) rating = models.IntegerField( default=1, validators=[ MaxValueValidator(10), MinValueValidator(1) ] ) def __str__(self): return f\"{self.id}. {self.user}\" Watchlist \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0430\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. class Watchlist(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"watchlist\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE) def __str__(self): return f\"{self.id}. {self.user.username}: {self.listing.title}\" serializers.py \u0414\u043b\u044f CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 API \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c ModelSerializer \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u0412 MyUserSerializer \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 create, \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u043d\u0430\u0441 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0445\u0435\u0448 \u043f\u0430\u0440\u043e\u043b\u044f \u0432 \u0431\u0430\u0437\u0443. class MyUserSerializer(serializers.ModelSerializer): class Meta: model = User fields = ( \"id\", \"username\", \"email\", \"first_name\", \"last_name\", ) def create(self, validated_data): return super().create({**validated_data, \"password\": make_password(validated_data[\"password\"])}) \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: class CategorySerializer(serializers.ModelSerializer): class Meta: model = Category fields = (\"id\", \"title\", \"image\") class ListingSerializer(serializers.ModelSerializer): category = CategorySerializer() user = MyUserSerializer() class Meta: model = Listing fields = (\"id\", \"title\", \"image\", \"description\", \"category\", \"price\", \"user\", \"status\") class WatchlistSerializer(serializers.ModelSerializer): user = MyUserSerializer() listing = ListingSerializer() class Meta: model = Watchlist fields = (\"id\", \"user\", \"listing\") class BidSerializer(serializers.ModelSerializer): user = MyUserSerializer() listing = ListingSerializer() class Meta: model = Watchlist fields = (\"id\", \"user\", \"listing\", \"price\") class CommentSerializer(serializers.ModelSerializer): user = MyUserSerializer() listing = ListingSerializer() class Meta: model = Comment fields = (\"id\", \"user\", \"listing\", \"comment\", \"rating\") \u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043d\u0438\u0445. views.py \u041a\u043b\u0430\u0441\u0441 viewsets.ModelViewSet \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f rest_framework \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u043c \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0435 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. class UserViewSet(viewsets.ModelViewSet): queryset = User.objects.all() serializer_class = MyUserSerializer class CategoryViewSet(viewsets.ModelViewSet): queryset = Category.objects.all() serializer_class = CategorySerializer class ListingViewSet(viewsets.ModelViewSet): queryset = Listing.objects.all() serializer_class = ListingSerializer class WatchlistViewSet(viewsets.ModelViewSet): queryset = Watchlist.objects.all() serializer_class = WatchlistSerializer class BidViewSet(viewsets.ModelViewSet): queryset = Bid.objects.all() serializer_class = BidSerializer class CommentViewSet(viewsets.ModelViewSet): queryset = Comment.objects.all() serializer_class = CommentSerializer settings.py \u041d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f API \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438. INSTALLED_APPS = [ ... 'auctions', 'rest_framework', 'rest_framework.authtoken', 'djoser', 'drf-yasg', ] \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b djoser \u0437\u043d\u0430\u043b \u043e \u0442\u043e\u043c, \u043a\u0430\u043a\u043e\u0439 serializer \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0443\u0442\u044c \u0434\u043e \u043a\u043b\u0430\u0441\u0441\u0430. DJOSER = { 'SERIALIZERS': { 'user_create': 'auctions.serializers.MyUserSerializer', }, } \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u0441\u0435 \u043f\u0443\u0442\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0431\u0435\u0437 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u041d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u043a\u0430\u0436\u0435\u043c \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435. REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'], 'DEFAULT_AUTHENTICATION_CLASSES': [ 'rest_framework.authentication.TokenAuthentication', ], } \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0443, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f Swagger. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u043e\u043a\u0435\u043d\u0430 \u0432 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u043d\u0430\u0447\u0430\u043b\u0443 \u0442\u0430\u043a\u0436\u0435 Token <TOKEN> . SWAGGER_SETTINGS = { 'SECURITY_DEFINITIONS': { 'api_key': { 'type': 'apiKey', 'in': 'header', 'name': 'Authorization' } }, } urls.py \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043f\u0443\u0442\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0414\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b: api/ auth/ admin/ swagger/ urlpatterns = [ path(\"admin/\", admin.site.urls), path(\"api/\", include(\"auctions.urls\")), path(\"auth/\", include('djoser.urls')), path(\"auth/\", include('djoser.urls.authtoken')), path( \"swagger/\", schema_view.with_ui(\"swagger\", cache_timeout=0), name=\"schema-swagger-ui\", ), ] \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u0432 api/ users/ categories/ listings/ watchlists/ bids/ comments/ r = DefaultRouter() r.register('users', UserViewSet) r.register('categories', CategoryViewSet) r.register('listings', ListingViewSet) r.register('watchlists', WatchlistViewSet) r.register('bids', BidViewSet) r.register('comments', CommentViewSet) urlpatterns = r.urls Endpoints Bids URL : /api/bids/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content POST : { \"id\": 1, \"user\": { \"id\": 2, \"username\": \"admin\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"listing\": { \"id\": 1, \"title\": \"Broomstick\", \"image\": \"https://static.wikia.nocookie.net/harrypotter/images/2/29/Nimbus_200.jpg/revision/latest/scale-to-width-down/540?cb=20170721202204&path-prefix=pl\", \"description\": \"Nimbus 2000 Broomstick\", \"category\": { \"id\": 5, \"title\": \"Sports\", \"image\": \"http://127.0.0.1:8000/media/categories/sports-categoty3x.png\" }, \"price\": 50, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false }, \"price\": 56 } Content GET : [ { \"id\": 1, \"user\": { \"id\": 2, \"username\": \"admin\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"listing\": { \"id\": 1, \"title\": \"Broomstick\", \"image\": \"https://static.wikia.nocookie.net/harrypotter/images/2/29/Nimbus_200.jpg/revision/latest/scale-to-width-down/540?cb=20170721202204&path-prefix=pl\", \"description\": \"Nimbus 2000 Broomstick\", \"category\": { \"id\": 5, \"title\": \"Sports\", \"image\": \"http://127.0.0.1:8000/media/categories/sports-categoty3x.png\" }, \"price\": 50, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false }, \"price\": 56 }, ] URL : /api/bids/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : { \"id\": 1, \"user\": { \"id\": 2, \"username\": \"admin\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"listing\": { \"id\": 1, \"title\": \"Broomstick\", \"image\": \"https://static.wikia.nocookie.net/harrypotter/images/2/29/Nimbus_200.jpg/revision/latest/scale-to-width-down/540?cb=20170721202204&path-prefix=pl\", \"description\": \"Nimbus 2000 Broomstick\", \"category\": { \"id\": 5, \"title\": \"Sports\", \"image\": \"http://127.0.0.1:8000/media/categories/sports-categoty3x.png\" }, \"price\": 50, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false }, \"price\": 56 } Categories URL : /api/categories/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : [ { \"id\": 0, \"title\": \"string\", \"image\": \"string\" } ] URL : /api/categories/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : { \"id\": 0, \"title\": \"string\", \"image\": \"string\" } Comments URL : /api/comments/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : [ { \"id\": 0, \"user\": { \"id\": 0, \"username\": \"0BqHODclHpFVnTrDzBz9MNN2b@H11+Im6Ytz@iJQQ3COGDRj-HbyufS4BjDsICYBiDcxxSbx5\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"listing\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"Sy5hibMB3B3gK+JOQKsWx-qJLSYHhVEOJlYHDR3u1qR4TKv64hcdg2VUuaGKuyRtS@y4Hq5HQ7CmXfQ4LJ1XriR.xmPVERkKS\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true }, \"comment\": \"string\", \"rating\": 10 } ] URL : /api/comments/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : { \"id\": 0, \"user\": { \"id\": 0, \"username\": \"m+qFQUC.L0PNb+Lmn@IRCqj54Y\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"listing\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"6pZ\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true }, \"comment\": \"string\", \"rating\": 10 } Listings URL : /api/listings/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : [ { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"Wy\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true } ] URL : /api/listings/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"Srmhuqrn_pLRu@_lOvuKs5.s1v7Wac4HbQMAx33bn-xttlaEu7FK300vac+EqSXXH1qvt\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true } Users URL : /api/users/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : [ { \"id\": 0, \"username\": \"80e7ark.tL\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" } ] URL : /api/users/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : { \"id\": 0, \"username\": \"JEybMILwBEZST0_-@HnnxKtPHqIaLkLNT0bUjUwkKcX0eIiM3-5G2EUcZlmxRO+_ZXSbez7n7cect@RcGDac\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" } Watchlists URL : /api/watchlists/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : [ { \"id\": 0, \"user\": { \"id\": 0, \"username\": \"Lh4B-xt0F_KN-BsIavPH.t0nF2\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"listing\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"RAG2e7xhIqs@LdnXksJADfqspqRLyM-PLXCUvwV-+F99r795wc7VkjIvs5@g_inqxK37eR\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true } } ] URL : /api/watchlists/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated Success Responses Code : 200 OK Content : { \"id\": 0, \"user\": { \"id\": 0, \"username\": \"TLtKUAW9u@WDTHOvyrX8\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"listing\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"t.9a7Nusbrsa4o35z-ZoYgWiaQfddQF2G9p9oHZN9xoqv1_I@TLpmvd4Qk@Gcf17DK+nEPgMmFLCkE\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true } } \u041f\u0440\u0438\u043c\u0435\u0440 \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u043e\u0432 \u0430\u0443\u043a\u0438\u043e\u043d\u043e\u0432. curl -LX GET http://127.0.0.1:8000/api/listings/ \u0423 \u043d\u0430\u0441 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u0434\u043e\u0440\u0441\u0442\u0443\u043f\u0430. { \"detail\": \"Authentication credentials were not provided.\" } \u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 djoser \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0442\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u043c \u0442\u043e\u043a\u0435\u043d \u0434\u043e\u0441\u0442\u0443\u043f\u0430. curl -X POST http://127.0.0.1:8000/auth/token/login/ --data 'username=daniel2&password=NgYjjr@3bJxFRsR' \u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c. { \"auth_token\": \"7350939e63742af46f5f07682c6ba6f526580481\" } \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u0441\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u0438 \u0441 \u043d\u0430\u0448\u0438\u043c \u0442\u043e\u043a\u0435\u043d\u043e\u043c. curl -LX GET http://127.0.0.1:8000/api/listings/ -H 'Authorization: Token <TOKEN>' \u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0442\u0430\u043a\u0438\u043c. [ { \"id\": 1, \"title\": \"Broomstick\", \"image\": \"https://static.wikia.nocookie.net/harrypotter/images/2/29/Nimbus_200.jpg/revision/latest/scale-to-width-down/540?cb=20170721202204&path-prefix=pl\", \"description\": \"Nimbus 2000 Broomstick\", \"category\": { \"id\": 5, \"title\": \"Sports\", \"image\": \"http://127.0.0.1:8000/media/categories/sports-categoty3x.png\" }, \"price\": 50, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false }, { \"id\": 2, \"title\": \"iPhone 12\", \"image\": \"https://cdn.tmobile.com/content/dam/t-mobile/en-p/cell-phones/apple/Apple-iPhone-12-mini/Blue/Apple-iPhone-12-mini-Blue-frontimage.png\", \"description\": null, \"category\": { \"id\": 1, \"title\": \"Electronics\", \"image\": \"http://127.0.0.1:8000/media/categories/electronics-categoty.png\" }, \"price\": 1000, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": true }, { \"id\": 3, \"title\": \"New Test\", \"image\": null, \"description\": null, \"category\": null, \"price\": 10, \"user\": { \"id\": 2, \"username\": \"admin\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false }, { \"id\": 4, \"title\": \"Quadra 66\", \"image\": \"https://static3.hotcarsimages.com/wordpress/wp-content/uploads/2020/10/Quadra-Type-66-1-e1603386447228.jpg\", \"description\": \"A car from Cyberpunk 2077\", \"category\": { \"id\": 2, \"title\": \"Motors\", \"image\": \"http://127.0.0.1:8000/media/categories/motors-categoty3x.png\" }, \"price\": 60000, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": true }, { \"id\": 7, \"title\": \"Test\", \"image\": \"\", \"description\": \"\", \"category\": { \"id\": 5, \"title\": \"Sports\", \"image\": \"http://127.0.0.1:8000/media/categories/sports-categoty3x.png\" }, \"price\": 123, \"user\": { \"id\": 3, \"username\": \"test\", \"email\": \"test@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false } ]","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #3"},{"location":"lab-3/#3","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #3"},{"location":"lab-3/#_1","text":"\u0421\u0432\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0432\u0435\u0431 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 django, djangorestframework, djoser.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab-3/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"lab-3/#modelspy","text":"\u041c\u043e\u0434\u0435\u043b\u044c User \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. class User(AbstractUser): pass \u041c\u043e\u0434\u0435\u043b\u044c Listing \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0435\u043c \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0435. class Listing(models.Model): title = models.CharField(max_length=64) image = models.URLField(max_length=280, blank=True, null=True) description = models.CharField(max_length=280, blank=True, null=True) category = models.ForeignKey(\"Category\", on_delete=models.CASCADE, related_name=\"listings\", blank=True, null=True) price = models.IntegerField() user = models.ForeignKey(\"User\", on_delete=models.CASCADE) status = models.BooleanField(default=True) def __str__(self): return self.title Category \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u044b. class Category(models.Model): title = models.CharField(max_length=64) image = models.ImageField(upload_to=\"media/categories\") def __str__(self): return self.title Bid \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0442\u0430\u0432\u043a\u0430\u0445 \u043d\u0430 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0435. class Bid(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"bids\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE, related_name=\"bids\") price = models.IntegerField() def __str__(self): return f\"{self.id}. {self.user.username} bid {self.listing.title} for {self.price}\" Comment \u0445\u0440\u0430\u043d\u0438\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u043f\u043e\u0434 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0430\u043c\u0438, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10). class Comment(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"comments\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE, related_name=\"comments\") comment = models.CharField(max_length=280) rating = models.IntegerField( default=1, validators=[ MaxValueValidator(10), MinValueValidator(1) ] ) def __str__(self): return f\"{self.id}. {self.user}\" Watchlist \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0442\u0441\u043b\u0435\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u0443\u043a\u0446\u0438\u043e\u043d\u0430\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c\u0438. class Watchlist(models.Model): user = models.ForeignKey(\"User\", on_delete=models.CASCADE, related_name=\"watchlist\") listing = models.ForeignKey(\"Listing\", on_delete=models.CASCADE) def __str__(self): return f\"{self.id}. {self.user.username}: {self.listing.title}\"","title":"models.py"},{"location":"lab-3/#serializerspy","text":"\u0414\u043b\u044f CRUD \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043d\u0430\u0434 \u043c\u043e\u0434\u0435\u043b\u044f\u043c\u0438 \u0447\u0435\u0440\u0435\u0437 API \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c ModelSerializer \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u0412 MyUserSerializer \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 create, \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u043d\u0430\u0441 \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0445\u0435\u0448 \u043f\u0430\u0440\u043e\u043b\u044f \u0432 \u0431\u0430\u0437\u0443. class MyUserSerializer(serializers.ModelSerializer): class Meta: model = User fields = ( \"id\", \"username\", \"email\", \"first_name\", \"last_name\", ) def create(self, validated_data): return super().create({**validated_data, \"password\": make_password(validated_data[\"password\"])}) \u0412\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043e\u0441\u0442\u0430\u044e\u0442\u0441\u044f \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u044f\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: class CategorySerializer(serializers.ModelSerializer): class Meta: model = Category fields = (\"id\", \"title\", \"image\") class ListingSerializer(serializers.ModelSerializer): category = CategorySerializer() user = MyUserSerializer() class Meta: model = Listing fields = (\"id\", \"title\", \"image\", \"description\", \"category\", \"price\", \"user\", \"status\") class WatchlistSerializer(serializers.ModelSerializer): user = MyUserSerializer() listing = ListingSerializer() class Meta: model = Watchlist fields = (\"id\", \"user\", \"listing\") class BidSerializer(serializers.ModelSerializer): user = MyUserSerializer() listing = ListingSerializer() class Meta: model = Watchlist fields = (\"id\", \"user\", \"listing\", \"price\") class CommentSerializer(serializers.ModelSerializer): user = MyUserSerializer() listing = ListingSerializer() class Meta: model = Comment fields = (\"id\", \"user\", \"listing\", \"comment\", \"rating\") \u0412 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u0445 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043d\u0438\u0445.","title":"serializers.py"},{"location":"lab-3/#viewspy","text":"\u041a\u043b\u0430\u0441\u0441 viewsets.ModelViewSet \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f rest_framework \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u043c \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u0435 \u043f\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. class UserViewSet(viewsets.ModelViewSet): queryset = User.objects.all() serializer_class = MyUserSerializer class CategoryViewSet(viewsets.ModelViewSet): queryset = Category.objects.all() serializer_class = CategorySerializer class ListingViewSet(viewsets.ModelViewSet): queryset = Listing.objects.all() serializer_class = ListingSerializer class WatchlistViewSet(viewsets.ModelViewSet): queryset = Watchlist.objects.all() serializer_class = WatchlistSerializer class BidViewSet(viewsets.ModelViewSet): queryset = Bid.objects.all() serializer_class = BidSerializer class CommentViewSet(viewsets.ModelViewSet): queryset = Comment.objects.all() serializer_class = CommentSerializer","title":"views.py"},{"location":"lab-3/#settingspy","text":"\u041d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f API \u0438 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438. INSTALLED_APPS = [ ... 'auctions', 'rest_framework', 'rest_framework.authtoken', 'djoser', 'drf-yasg', ] \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b djoser \u0437\u043d\u0430\u043b \u043e \u0442\u043e\u043c, \u043a\u0430\u043a\u043e\u0439 serializer \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0443\u0442\u044c \u0434\u043e \u043a\u043b\u0430\u0441\u0441\u0430. DJOSER = { 'SERIALIZERS': { 'user_create': 'auctions.serializers.MyUserSerializer', }, } \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u0441\u0435 \u043f\u0443\u0442\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0431\u0435\u0437 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438. \u041d\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0443\u043a\u0430\u0436\u0435\u043c \u043f\u0440\u0430\u0432\u0430 \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435. REST_FRAMEWORK = { 'DEFAULT_PERMISSION_CLASSES': ['rest_framework.permissions.IsAuthenticated'], 'DEFAULT_AUTHENTICATION_CLASSES': [ 'rest_framework.authentication.TokenAuthentication', ], } \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0443, \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0434\u043b\u044f Swagger. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0442\u043e\u043a\u0435\u043d\u0430 \u0432 \u043f\u043e\u043b\u0435 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u043d\u0430\u0447\u0430\u043b\u0443 \u0442\u0430\u043a\u0436\u0435 Token <TOKEN> . SWAGGER_SETTINGS = { 'SECURITY_DEFINITIONS': { 'api_key': { 'type': 'apiKey', 'in': 'header', 'name': 'Authorization' } }, }","title":"settings.py"},{"location":"lab-3/#urlspy","text":"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043f\u0443\u0442\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0414\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0431\u0443\u0434\u0443\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b: api/ auth/ admin/ swagger/ urlpatterns = [ path(\"admin/\", admin.site.urls), path(\"api/\", include(\"auctions.urls\")), path(\"auth/\", include('djoser.urls')), path(\"auth/\", include('djoser.urls.authtoken')), path( \"swagger/\", schema_view.with_ui(\"swagger\", cache_timeout=0), name=\"schema-swagger-ui\", ), ] \u0411\u043e\u043b\u0435\u0435 \u0442\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u043f\u0443\u0442\u0438 \u0432 api/ users/ categories/ listings/ watchlists/ bids/ comments/ r = DefaultRouter() r.register('users', UserViewSet) r.register('categories', CategoryViewSet) r.register('listings', ListingViewSet) r.register('watchlists', WatchlistViewSet) r.register('bids', BidViewSet) r.register('comments', CommentViewSet) urlpatterns = r.urls","title":"urls.py"},{"location":"lab-3/#endpoints","text":"","title":"Endpoints"},{"location":"lab-3/#bids","text":"URL : /api/bids/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated","title":"Bids"},{"location":"lab-3/#success-responses","text":"Code : 200 OK Content POST : { \"id\": 1, \"user\": { \"id\": 2, \"username\": \"admin\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"listing\": { \"id\": 1, \"title\": \"Broomstick\", \"image\": \"https://static.wikia.nocookie.net/harrypotter/images/2/29/Nimbus_200.jpg/revision/latest/scale-to-width-down/540?cb=20170721202204&path-prefix=pl\", \"description\": \"Nimbus 2000 Broomstick\", \"category\": { \"id\": 5, \"title\": \"Sports\", \"image\": \"http://127.0.0.1:8000/media/categories/sports-categoty3x.png\" }, \"price\": 50, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false }, \"price\": 56 } Content GET : [ { \"id\": 1, \"user\": { \"id\": 2, \"username\": \"admin\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"listing\": { \"id\": 1, \"title\": \"Broomstick\", \"image\": \"https://static.wikia.nocookie.net/harrypotter/images/2/29/Nimbus_200.jpg/revision/latest/scale-to-width-down/540?cb=20170721202204&path-prefix=pl\", \"description\": \"Nimbus 2000 Broomstick\", \"category\": { \"id\": 5, \"title\": \"Sports\", \"image\": \"http://127.0.0.1:8000/media/categories/sports-categoty3x.png\" }, \"price\": 50, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false }, \"price\": 56 }, ] URL : /api/bids/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated","title":"Success Responses"},{"location":"lab-3/#success-responses_1","text":"Code : 200 OK Content : { \"id\": 1, \"user\": { \"id\": 2, \"username\": \"admin\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"listing\": { \"id\": 1, \"title\": \"Broomstick\", \"image\": \"https://static.wikia.nocookie.net/harrypotter/images/2/29/Nimbus_200.jpg/revision/latest/scale-to-width-down/540?cb=20170721202204&path-prefix=pl\", \"description\": \"Nimbus 2000 Broomstick\", \"category\": { \"id\": 5, \"title\": \"Sports\", \"image\": \"http://127.0.0.1:8000/media/categories/sports-categoty3x.png\" }, \"price\": 50, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false }, \"price\": 56 }","title":"Success Responses"},{"location":"lab-3/#categories","text":"URL : /api/categories/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated","title":"Categories"},{"location":"lab-3/#success-responses_2","text":"Code : 200 OK Content : [ { \"id\": 0, \"title\": \"string\", \"image\": \"string\" } ] URL : /api/categories/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated","title":"Success Responses"},{"location":"lab-3/#success-responses_3","text":"Code : 200 OK Content : { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }","title":"Success Responses"},{"location":"lab-3/#comments","text":"URL : /api/comments/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated","title":"Comments"},{"location":"lab-3/#success-responses_4","text":"Code : 200 OK Content : [ { \"id\": 0, \"user\": { \"id\": 0, \"username\": \"0BqHODclHpFVnTrDzBz9MNN2b@H11+Im6Ytz@iJQQ3COGDRj-HbyufS4BjDsICYBiDcxxSbx5\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"listing\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"Sy5hibMB3B3gK+JOQKsWx-qJLSYHhVEOJlYHDR3u1qR4TKv64hcdg2VUuaGKuyRtS@y4Hq5HQ7CmXfQ4LJ1XriR.xmPVERkKS\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true }, \"comment\": \"string\", \"rating\": 10 } ] URL : /api/comments/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated","title":"Success Responses"},{"location":"lab-3/#success-responses_5","text":"Code : 200 OK Content : { \"id\": 0, \"user\": { \"id\": 0, \"username\": \"m+qFQUC.L0PNb+Lmn@IRCqj54Y\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"listing\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"6pZ\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true }, \"comment\": \"string\", \"rating\": 10 }","title":"Success Responses"},{"location":"lab-3/#listings","text":"URL : /api/listings/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated","title":"Listings"},{"location":"lab-3/#success-responses_6","text":"Code : 200 OK Content : [ { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"Wy\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true } ] URL : /api/listings/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated","title":"Success Responses"},{"location":"lab-3/#success-responses_7","text":"Code : 200 OK Content : { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"Srmhuqrn_pLRu@_lOvuKs5.s1v7Wac4HbQMAx33bn-xttlaEu7FK300vac+EqSXXH1qvt\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true }","title":"Success Responses"},{"location":"lab-3/#users","text":"URL : /api/users/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated","title":"Users"},{"location":"lab-3/#success-responses_8","text":"Code : 200 OK Content : [ { \"id\": 0, \"username\": \"80e7ark.tL\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" } ] URL : /api/users/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated","title":"Success Responses"},{"location":"lab-3/#success-responses_9","text":"Code : 200 OK Content : { \"id\": 0, \"username\": \"JEybMILwBEZST0_-@HnnxKtPHqIaLkLNT0bUjUwkKcX0eIiM3-5G2EUcZlmxRO+_ZXSbez7n7cect@RcGDac\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }","title":"Success Responses"},{"location":"lab-3/#watchlists","text":"URL : /api/watchlists/ Method : GET, POST Auth required : YES Permissions required : IsAuthenticated","title":"Watchlists"},{"location":"lab-3/#success-responses_10","text":"Code : 200 OK Content : [ { \"id\": 0, \"user\": { \"id\": 0, \"username\": \"Lh4B-xt0F_KN-BsIavPH.t0nF2\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"listing\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"RAG2e7xhIqs@LdnXksJADfqspqRLyM-PLXCUvwV-+F99r795wc7VkjIvs5@g_inqxK37eR\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true } } ] URL : /api/watchlists/<int:pk> Method : GET, PUT, PATCH, DELETE Auth required : YES Permissions required : IsAuthenticated","title":"Success Responses"},{"location":"lab-3/#success-responses_11","text":"Code : 200 OK Content : { \"id\": 0, \"user\": { \"id\": 0, \"username\": \"TLtKUAW9u@WDTHOvyrX8\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"listing\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\", \"description\": \"string\", \"category\": { \"id\": 0, \"title\": \"string\", \"image\": \"string\" }, \"price\": 9223372036854776000, \"user\": { \"id\": 0, \"username\": \"t.9a7Nusbrsa4o35z-ZoYgWiaQfddQF2G9p9oHZN9xoqv1_I@TLpmvd4Qk@Gcf17DK+nEPgMmFLCkE\", \"email\": \"user@example.com\", \"first_name\": \"string\", \"last_name\": \"string\" }, \"status\": true } }","title":"Success Responses"},{"location":"lab-3/#_3","text":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u043e\u0432 \u0430\u0443\u043a\u0438\u043e\u043d\u043e\u0432. curl -LX GET http://127.0.0.1:8000/api/listings/ \u0423 \u043d\u0430\u0441 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u043c\u044b \u043d\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438 \u0442\u043e\u043a\u0435\u043d \u0434\u043e\u0440\u0441\u0442\u0443\u043f\u0430. { \"detail\": \"Authentication credentials were not provided.\" } \u0422\u0430\u043a \u043a\u0430\u043a \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 djoser \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u0442\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u043c \u0442\u043e\u043a\u0435\u043d \u0434\u043e\u0441\u0442\u0443\u043f\u0430. curl -X POST http://127.0.0.1:8000/auth/token/login/ --data 'username=daniel2&password=NgYjjr@3bJxFRsR' \u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c. { \"auth_token\": \"7350939e63742af46f5f07682c6ba6f526580481\" } \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u0441\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u0438 \u0441 \u043d\u0430\u0448\u0438\u043c \u0442\u043e\u043a\u0435\u043d\u043e\u043c. curl -LX GET http://127.0.0.1:8000/api/listings/ -H 'Authorization: Token <TOKEN>' \u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0442\u0430\u043a\u0438\u043c. [ { \"id\": 1, \"title\": \"Broomstick\", \"image\": \"https://static.wikia.nocookie.net/harrypotter/images/2/29/Nimbus_200.jpg/revision/latest/scale-to-width-down/540?cb=20170721202204&path-prefix=pl\", \"description\": \"Nimbus 2000 Broomstick\", \"category\": { \"id\": 5, \"title\": \"Sports\", \"image\": \"http://127.0.0.1:8000/media/categories/sports-categoty3x.png\" }, \"price\": 50, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false }, { \"id\": 2, \"title\": \"iPhone 12\", \"image\": \"https://cdn.tmobile.com/content/dam/t-mobile/en-p/cell-phones/apple/Apple-iPhone-12-mini/Blue/Apple-iPhone-12-mini-Blue-frontimage.png\", \"description\": null, \"category\": { \"id\": 1, \"title\": \"Electronics\", \"image\": \"http://127.0.0.1:8000/media/categories/electronics-categoty.png\" }, \"price\": 1000, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": true }, { \"id\": 3, \"title\": \"New Test\", \"image\": null, \"description\": null, \"category\": null, \"price\": 10, \"user\": { \"id\": 2, \"username\": \"admin\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false }, { \"id\": 4, \"title\": \"Quadra 66\", \"image\": \"https://static3.hotcarsimages.com/wordpress/wp-content/uploads/2020/10/Quadra-Type-66-1-e1603386447228.jpg\", \"description\": \"A car from Cyberpunk 2077\", \"category\": { \"id\": 2, \"title\": \"Motors\", \"image\": \"http://127.0.0.1:8000/media/categories/motors-categoty3x.png\" }, \"price\": 60000, \"user\": { \"id\": 1, \"username\": \"daniel\", \"email\": \"daniel@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": true }, { \"id\": 7, \"title\": \"Test\", \"image\": \"\", \"description\": \"\", \"category\": { \"id\": 5, \"title\": \"Sports\", \"image\": \"http://127.0.0.1:8000/media/categories/sports-categoty3x.png\" }, \"price\": 123, \"user\": { \"id\": 3, \"username\": \"test\", \"email\": \"test@pewpee.com\", \"first_name\": \"\", \"last_name\": \"\" }, \"status\": false } ]","title":"\u041f\u0440\u0438\u043c\u0435\u0440"},{"location":"lab-4/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #4 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.js. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f main.js \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432 \u043a \u043d\u0435\u043c\u0443 \u0440\u043e\u0443\u0442\u0435\u0440 \u0438 pinia \u0434\u043b\u044f state management. import './assets/main.css' import { createApp } from 'vue' import { createPinia } from 'pinia' import App from './App.vue' import router from './router' const app = createApp(App) app.use(createPinia()) app.use(router) app.mount('#app') stores/index.js \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430\u043c \u043e\u043d\u0438 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0445\u043e\u0434\u0430, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0414\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f, \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b. import { defineStore } from 'pinia' export const useAuthStore = defineStore('auth', { state: () => ({ password: localStorage.getItem(\"password\"), username: localStorage.getItem(\"username\"), token: localStorage.getItem(\"auth_token\") }), getters: { userData: (state) => state }, actions: { login(username, password, token) { this.username = username this.password = password this.token = token localStorage.setItem(\"auth_token\", token) localStorage.setItem(\"username\", username) localStorage.setItem(\"password\", password) }, logout() { this.username = '' this.password = '' this.token = '' localStorage.removeItem(\"auth_token\") localStorage.removeItem(\"username\") localStorage.removeItem(\"password\") }, } }) api/index.js \u0414\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0431\u0435\u043a\u0435\u043d\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a Authorization \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u041c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 axios \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u044d\u0442\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435. views/LoginView.vue \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0445\u043e\u0434\u0430 \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u043b\u0432\u0435\u043d\u0438\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043b\u043e\u0433\u0438\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u043b\u0430\u0435\u0442 post-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 API. <script> import api from '../api' import router from '../router' import { useAuthStore } from '../stores/auth' export default { data() { this.authStore = useAuthStore() return { loginData: { email: '', username: '', password: '', }, } }, methods: { login() { api .post('auth/token/login', { username: this.loginData.username, password: this.loginData.password, }) .then((resp) => resp.data) .then((data) => { this.authStore.login( this.loginData.username, this.loginData.password, data.auth_token ) router.push({ path: '/listings' }) }) }, }, } </script> <template> <div> <div class=\"login\"> <h3>Login</h3> <label for=\"username\">Username</label> <input type=\"text\" name=\"username\" v-model=\"loginData.username\" /> <br /> <br /> <label for=\"password\">Password</label> <input type=\"password\" name=\"password\" v-model=\"loginData.password\" /> <br /> <br /> <button v-on:click=\"login\">Login</button> </div> </div> </template> views/SignupView.vue \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u043b\u0432\u0435\u043d\u0438\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u043b\u0430\u0435\u0442 post-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 API. <script> import api from '../api' import router from '../router' import { useAuthStore } from '../stores/auth' export default { data() { this.authStore = useAuthStore() return { signupData: { email: '', username: '', password: '', }, } }, methods: { signup() { api .post('api/users/', { email: this.signupData.email, username: this.signupData.username, password: this.signupData.password, }) .then((resp) => resp.data) .then((data) => { this.authStore.login( this.signupData.username, this.signupData.password, data.auth_token ) router.push({ path: '/listings' }) }) }, }, } </script> <template> <div class=\"signup\"> <h3>Sign Up</h3> <label for=\"email\">Email</label> <input type=\"text\" name=\"email\" v-model=\"signupData.email\" /> <br /> <br /> <label for=\"username\">Username</label> <input type=\"text\" name=\"username\" v-model=\"signupData.username\" /> <br /> <br /> <label for=\"password\">Password</label> <input type=\"password\" name=\"password\" v-model=\"signupData.password\" /> <br /> <br /> <button v-on:click=\"signup\">Sign Up</button> </div> </template> views/ListingsView.vue \u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u043b\u0432\u0435\u043d\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u044b\u043c \u044d\u043a\u0440\u0430\u043d\u043e\u043c, \u0447\u0442\u043e \u0432\u0438\u0434\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0441\u043b\u0435 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0441\u0432\u043e\u044e \u0443\u0447\u0435\u0442\u043d\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. <script> import api from '../api' import Listing from '../components/Listing.vue' import router from '../router' export default { data() { return { listings: [] } }, components: { Listing, }, methods: { getListings() { api .get('api/listings/') .then((resp) => resp.data) .then((data) => (this.listings = data)) .catch(() => alert('Failed to fetch listings')) }, newListing() { router.push({ path: '/listings/new' }) }, }, beforeMount() { this.getListings() }, } </script> <template> <br /> <button @click=\"newListing\">New listing</button> <div class=\"listings\"> <Listing v-for=\"listing in listings\" :listing=\"listing\" :key=\"listing.id\" /> </div> </template> view/ListingDetailView.vue \u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u044f\u043b\u0432\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0441\u0442\u0430\u0432\u043a\u0443. <script> import api from '../api' import { useAuthStore } from '../stores/auth' import CommentsView from './CommentsView.vue' export default { data() { this.authStore = useAuthStore(); return { listing: { id: this.$route.params.id, title: '', description: '' }, bids: [] }; }, beforeMount() { api .get(`api/listings/${this.listing.id}`) .then((resp) => resp.data) .then((data) => (this.listing = data)) .catch((_) => alert('Failed to fetch listing')); api .get(`api/listings/${this.listing.id}/bids`) .then((resp) => resp.data) .then((data) => (this.bids = data)) .catch((_) => alert('Failed to fetch listing\\'s bids')); }, components: { CommentsView } } </script> <template> <h2>Listing: {{ listing.title }}</h2> <h2 v-if=\"listing.status == false\" style=\"color:red\">Closed</h2> <div> <img v-if=\"listing.image\" class=\"listing-image\" :src=\"listing.image\" /> <div v-if=\"listing.description\" class=\"listing-desc\">{{ listing.description }}</div> </div> <div style=\"margin: 40px 0\"> <div><b>Starting Price:</b> ${{ listing.price }}</div> <br /> <template v-if=\"bids.length != 0\"> <div v-if=\"bids[bids.length - 1].price\" class=\"listing-price\"><b>Current Price:</b> ${{ bids[bids.length - 1].price }}</div> <div v-if=\"this.authStore.username == bids[bids.length - 1].user.username\">Your bid is the current bid.</div> </template> </div> <div style=\"margin: 40px 0\"> <h3>Details</h3> <ul> <li>Listed by: <b>{{ listing.user.username }}</b></li> <li v-if=\"listing.category\">Category: {{ listing.category.title }}</li> </ul> </div> <CommentsView :listing=\"listing\"/> </template> <style> .listing-image { max-width: 400px; max-height: 400px; } </style> views/CommentsView.vue \u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043f\u043e\u0434 \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u043e\u043c. <script> import api from '../api' import router from '../router' import Comment from '../components/Comment.vue' import { RouterLink } from 'vue-router' export default { props: ['listing'], data() { return { post: this.$props.listing, comments: [], currentPage: 0, perPage: 2 } }, methods: { newComment() { router.push({ path: `/listings/${this.listing.id}/new-comment` }) }, prevPage() { if (this.currentPage - 1 >= 0) { this.currentPage-- this.fetchComments() } }, nextPage() { this.currentPage++ this.fetchComments() }, fetchComments() { console.log('fetching ', this.currentPage) api .get(`api/listing_comments/${this.listing.id}`, { params: { page: this.currentPage, perPage: this.perPage }, }) .then((resp) => resp.data) .then((data) => (this.comments = data)) .catch((_) => alert('Failed to fetch comments')) }, }, beforeMount() { this.currentPage = 0 this.fetchComments() }, components: [Comment], components: { Comment, RouterLink }, } </script> <template> <h3>Comments</h3> <button v-on:click=\"newComment\">New comment</button> <Comment v-for=\"comment in comments\" :comment=\"comment\" :key=\"comment.id\" /> <div class=\"pagination\"> <button v-on:click=\"prevPage\">&lt; Prev</button> <button v-on:click=\"nextPage\">Next &gt;</button> </div> </template> views/NewCommentView.vue \u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043f\u043e\u0434 \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u043e\u043c. <script> import router from '../router' import api from '../api' export default { data() { return { listingId: this.$route.params.id, content: '' } }, methods: { publish() { api .post('api/comments/', { comment: this.content, listing_id: this.listingId, }) .then((_) => router.push({ path: `/listings/${this.listingId}` })) .catch((_) => alert('Failed to create a comment')) }, }, } </script> <template> <h2>New comment</h2> <label for=\"content\">Content</label> <br /> <textarea name=\"content\" cols=\"30\" rows=\"10\" v-model=\"content\"></textarea> <br /><br /> <button v-on:click=\"publish\">Create</button> </template> views/NewListingView.vue \u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0439\u0445 \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u043e\u0432 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435. <script> import router from '../router' import api from '../api' import { useAuthStore } from '../stores/auth' export default { data() { this.authStore = useAuthStore() return { title: '', description: '', image: '', price: 0, } }, methods: { publish() { api .post('api/listings/', { title: this.title, description: this.description, user: this.authStore.userData.username, price: this.price, image: this.image, status: true, }) .then((_) => router.push({ path: '/listings' })) .catch((_) => alert('Failed to create a listing')) }, }, } </script> <template> <h2>Create Listing</h2> <label for=\"title\">Title</label> <br /> <input type=\"text\" name=\"title\" v-model=\"title\" /> <br /><br /> <label for=\"description\">Description (optional)</label> <br /> <textarea name=\"description\" cols=\"30\" rows=\"10\" v-model=\"description\"></textarea> <br /><br /> <label for=\"image\">Image URL (optional)</label> <br /> <input type=\"text\" name=\"image\" v-model=\"image\" /> <br /><br /> <label for=\"image\">Starting price $</label> <br /> <input type=\"number\" name=\"price\" v-model=\"price\" /> <br /><br /> <button v-on:click=\"publish\">Create</button> </template>","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #4"},{"location":"lab-4/#4","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #4"},{"location":"lab-4/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 vue.js.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab-4/#_2","text":"","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"lab-4/#mainjs","text":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u0430\u0448\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0432 \u043a \u043d\u0435\u043c\u0443 \u0440\u043e\u0443\u0442\u0435\u0440 \u0438 pinia \u0434\u043b\u044f state management. import './assets/main.css' import { createApp } from 'vue' import { createPinia } from 'pinia' import App from './App.vue' import router from './router' const app = createApp(App) app.use(createPinia()) app.use(router) app.mount('#app')","title":"main.js"},{"location":"lab-4/#storesindexjs","text":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0435 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0434\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041d\u0430\u043c \u043e\u043d\u0438 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0445\u043e\u0434\u0430, \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u0440\u043e\u0444\u0438\u043b\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0414\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u044f, \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b. import { defineStore } from 'pinia' export const useAuthStore = defineStore('auth', { state: () => ({ password: localStorage.getItem(\"password\"), username: localStorage.getItem(\"username\"), token: localStorage.getItem(\"auth_token\") }), getters: { userData: (state) => state }, actions: { login(username, password, token) { this.username = username this.password = password this.token = token localStorage.setItem(\"auth_token\", token) localStorage.setItem(\"username\", username) localStorage.setItem(\"password\", password) }, logout() { this.username = '' this.password = '' this.token = '' localStorage.removeItem(\"auth_token\") localStorage.removeItem(\"username\") localStorage.removeItem(\"password\") }, } })","title":"stores/index.js"},{"location":"lab-4/#apiindexjs","text":"\u0414\u043b\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0431\u0435\u043a\u0435\u043d\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a Authorization \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0435\u0440\u0435\u0434 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u043e\u0439 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u041c\u044b \u0440\u0435\u0448\u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 axios \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u044d\u0442\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435.","title":"api/index.js"},{"location":"lab-4/#viewsloginviewvue","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0432\u0445\u043e\u0434\u0430 \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u043b\u0432\u0435\u043d\u0438\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043b\u043e\u0433\u0438\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u043b\u0430\u0435\u0442 post-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 API. <script> import api from '../api' import router from '../router' import { useAuthStore } from '../stores/auth' export default { data() { this.authStore = useAuthStore() return { loginData: { email: '', username: '', password: '', }, } }, methods: { login() { api .post('auth/token/login', { username: this.loginData.username, password: this.loginData.password, }) .then((resp) => resp.data) .then((data) => { this.authStore.login( this.loginData.username, this.loginData.password, data.auth_token ) router.push({ path: '/listings' }) }) }, }, } </script> <template> <div> <div class=\"login\"> <h3>Login</h3> <label for=\"username\">Username</label> <input type=\"text\" name=\"username\" v-model=\"loginData.username\" /> <br /> <br /> <label for=\"password\">Password</label> <input type=\"password\" name=\"password\" v-model=\"loginData.password\" /> <br /> <br /> <button v-on:click=\"login\">Login</button> </div> </div> </template>","title":"views/LoginView.vue"},{"location":"lab-4/#viewssignupviewvue","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u043b\u0432\u0435\u043d\u0438\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0435\u043b\u0430\u0435\u0442 post-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 API. <script> import api from '../api' import router from '../router' import { useAuthStore } from '../stores/auth' export default { data() { this.authStore = useAuthStore() return { signupData: { email: '', username: '', password: '', }, } }, methods: { signup() { api .post('api/users/', { email: this.signupData.email, username: this.signupData.username, password: this.signupData.password, }) .then((resp) => resp.data) .then((data) => { this.authStore.login( this.signupData.username, this.signupData.password, data.auth_token ) router.push({ path: '/listings' }) }) }, }, } </script> <template> <div class=\"signup\"> <h3>Sign Up</h3> <label for=\"email\">Email</label> <input type=\"text\" name=\"email\" v-model=\"signupData.email\" /> <br /> <br /> <label for=\"username\">Username</label> <input type=\"text\" name=\"username\" v-model=\"signupData.username\" /> <br /> <br /> <label for=\"password\">Password</label> <input type=\"password\" name=\"password\" v-model=\"signupData.password\" /> <br /> <br /> <button v-on:click=\"signup\">Sign Up</button> </div> </template>","title":"views/SignupView.vue"},{"location":"lab-4/#viewslistingsviewvue","text":"\u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u043b\u0432\u0435\u043d\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0432\u044b\u043c \u044d\u043a\u0440\u0430\u043d\u043e\u043c, \u0447\u0442\u043e \u0432\u0438\u0434\u0438\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043f\u043e\u0441\u043b\u0435 \u0432\u0445\u043e\u0434\u0430 \u0432 \u0441\u0432\u043e\u044e \u0443\u0447\u0435\u0442\u043d\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. <script> import api from '../api' import Listing from '../components/Listing.vue' import router from '../router' export default { data() { return { listings: [] } }, components: { Listing, }, methods: { getListings() { api .get('api/listings/') .then((resp) => resp.data) .then((data) => (this.listings = data)) .catch(() => alert('Failed to fetch listings')) }, newListing() { router.push({ path: '/listings/new' }) }, }, beforeMount() { this.getListings() }, } </script> <template> <br /> <button @click=\"newListing\">New listing</button> <div class=\"listings\"> <Listing v-for=\"listing in listings\" :listing=\"listing\" :key=\"listing.id\" /> </div> </template>","title":"views/ListingsView.vue"},{"location":"lab-4/#viewlistingdetailviewvue","text":"\u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u044f\u043b\u0432\u044f\u0435\u0442\u0441\u044f \u0440\u0430\u0437\u0432\u0435\u0440\u043d\u0443\u0442\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0441 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0435\u0439 \u043e \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u0435, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044e\u044e \u0441\u0442\u0430\u0432\u043a\u0443. <script> import api from '../api' import { useAuthStore } from '../stores/auth' import CommentsView from './CommentsView.vue' export default { data() { this.authStore = useAuthStore(); return { listing: { id: this.$route.params.id, title: '', description: '' }, bids: [] }; }, beforeMount() { api .get(`api/listings/${this.listing.id}`) .then((resp) => resp.data) .then((data) => (this.listing = data)) .catch((_) => alert('Failed to fetch listing')); api .get(`api/listings/${this.listing.id}/bids`) .then((resp) => resp.data) .then((data) => (this.bids = data)) .catch((_) => alert('Failed to fetch listing\\'s bids')); }, components: { CommentsView } } </script> <template> <h2>Listing: {{ listing.title }}</h2> <h2 v-if=\"listing.status == false\" style=\"color:red\">Closed</h2> <div> <img v-if=\"listing.image\" class=\"listing-image\" :src=\"listing.image\" /> <div v-if=\"listing.description\" class=\"listing-desc\">{{ listing.description }}</div> </div> <div style=\"margin: 40px 0\"> <div><b>Starting Price:</b> ${{ listing.price }}</div> <br /> <template v-if=\"bids.length != 0\"> <div v-if=\"bids[bids.length - 1].price\" class=\"listing-price\"><b>Current Price:</b> ${{ bids[bids.length - 1].price }}</div> <div v-if=\"this.authStore.username == bids[bids.length - 1].user.username\">Your bid is the current bid.</div> </template> </div> <div style=\"margin: 40px 0\"> <h3>Details</h3> <ul> <li>Listed by: <b>{{ listing.user.username }}</b></li> <li v-if=\"listing.category\">Category: {{ listing.category.title }}</li> </ul> </div> <CommentsView :listing=\"listing\"/> </template> <style> .listing-image { max-width: 400px; max-height: 400px; } </style>","title":"view/ListingDetailView.vue"},{"location":"lab-4/#viewscommentsviewvue","text":"\u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043f\u043e\u0434 \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u043e\u043c. <script> import api from '../api' import router from '../router' import Comment from '../components/Comment.vue' import { RouterLink } from 'vue-router' export default { props: ['listing'], data() { return { post: this.$props.listing, comments: [], currentPage: 0, perPage: 2 } }, methods: { newComment() { router.push({ path: `/listings/${this.listing.id}/new-comment` }) }, prevPage() { if (this.currentPage - 1 >= 0) { this.currentPage-- this.fetchComments() } }, nextPage() { this.currentPage++ this.fetchComments() }, fetchComments() { console.log('fetching ', this.currentPage) api .get(`api/listing_comments/${this.listing.id}`, { params: { page: this.currentPage, perPage: this.perPage }, }) .then((resp) => resp.data) .then((data) => (this.comments = data)) .catch((_) => alert('Failed to fetch comments')) }, }, beforeMount() { this.currentPage = 0 this.fetchComments() }, components: [Comment], components: { Comment, RouterLink }, } </script> <template> <h3>Comments</h3> <button v-on:click=\"newComment\">New comment</button> <Comment v-for=\"comment in comments\" :comment=\"comment\" :key=\"comment.id\" /> <div class=\"pagination\"> <button v-on:click=\"prevPage\">&lt; Prev</button> <button v-on:click=\"nextPage\">Next &gt;</button> </div> </template>","title":"views/CommentsView.vue"},{"location":"lab-4/#viewsnewcommentviewvue","text":"\u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u0437\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432 \u043f\u043e\u0434 \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u043e\u043c. <script> import router from '../router' import api from '../api' export default { data() { return { listingId: this.$route.params.id, content: '' } }, methods: { publish() { api .post('api/comments/', { comment: this.content, listing_id: this.listingId, }) .then((_) => router.push({ path: `/listings/${this.listingId}` })) .catch((_) => alert('Failed to create a comment')) }, }, } </script> <template> <h2>New comment</h2> <label for=\"content\">Content</label> <br /> <textarea name=\"content\" cols=\"30\" rows=\"10\" v-model=\"content\"></textarea> <br /><br /> <button v-on:click=\"publish\">Create</button> </template>","title":"views/NewCommentView.vue"},{"location":"lab-4/#viewsnewlistingviewvue","text":"\u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0439\u0445 \u043b\u0438\u0441\u0442\u0438\u043d\u0433\u043e\u0432 \u043d\u0430 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435. <script> import router from '../router' import api from '../api' import { useAuthStore } from '../stores/auth' export default { data() { this.authStore = useAuthStore() return { title: '', description: '', image: '', price: 0, } }, methods: { publish() { api .post('api/listings/', { title: this.title, description: this.description, user: this.authStore.userData.username, price: this.price, image: this.image, status: true, }) .then((_) => router.push({ path: '/listings' })) .catch((_) => alert('Failed to create a listing')) }, }, } </script> <template> <h2>Create Listing</h2> <label for=\"title\">Title</label> <br /> <input type=\"text\" name=\"title\" v-model=\"title\" /> <br /><br /> <label for=\"description\">Description (optional)</label> <br /> <textarea name=\"description\" cols=\"30\" rows=\"10\" v-model=\"description\"></textarea> <br /><br /> <label for=\"image\">Image URL (optional)</label> <br /> <input type=\"text\" name=\"image\" v-model=\"image\" /> <br /><br /> <label for=\"image\">Starting price $</label> <br /> <input type=\"number\" name=\"price\" v-model=\"price\" /> <br /><br /> <button v-on:click=\"publish\">Create</button> </template>","title":"views/NewListingView.vue"},{"location":"pract-3-1/","text":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #3.1 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 #1 \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c 6 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.create . \u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u044b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 owners_data . # Create 6 car owners owners_data = [ { \"first_name\": \"Michael\", \"last_name\": \"Johnson\", }, { \"first_name\": \"Sarah\", \"last_name\": \"Williams\", }, { \"first_name\": \"David\", \"last_name\": \"Brown\", }, { \"first_name\": \"Emily\", \"last_name\": \"Davis\", }, { \"first_name\": \"Matthew\", \"last_name\": \"Robinson\", }, { \"first_name\": \"Olivia\", \"last_name\": \"Martinez\", }, ] owners = [CarOwner.objects.create(**data) for data in owners_data] \u0422\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0438\u0445 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. # Create 6 cars cars_data = [ {\"number\": \"PQR789\", \"model\": \"Audi\", \"color\": \"Black\"}, {\"number\": \"STU012\", \"model\": \"Mercedes\", \"color\": \"Red\"}, {\"number\": \"VWX345\", \"model\": \"Volkswagen\", \"color\": \"Gray\"}, {\"number\": \"YZA678\", \"model\": \"Subaru\", \"color\": \"Blue\"}, {\"number\": \"BCD901\", \"model\": \"Volvo\", \"color\": \"Silver\"}, {\"number\": \"EFG234\", \"model\": \"Tesla\", \"color\": \"White\"}, ] for data in cars_data: Car.objects.create(**data) # Assign 1 to 3 cars for each owner for owner, car in zip(CarOwner.objects.all(), Car.objects.all()): CarOwnership.objects.create( owner=owner, car=car, start_date=timezone.now(), end_date=timezone.now() + timedelta(days=365), ) \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0430\u0432\u0430 \u0434\u043b\u044f \u0432\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f. # Create driver's licenses for each owner licenses_data = [ { \"owner\": owner, \"number\": f\"DL{index + 1}\", \"type_id\": \"A\", \"issue_date\": timezone.now(), } for index, owner in enumerate(owners) ] for data in licenses_data: DriverLicense.objects.create(**data) \u0412\u0435\u0441\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: python3 manage.py shell < 3.1/task1.py \u0417\u0430\u0434\u0430\u043d\u0438\u0435 #2 \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0413\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043c\u0430\u0440\u043a\u0438 Tesla \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter . tesla_cars = Car.objects.filter(model=\"Tesla\") for car in tesla_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"Michael\" \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter . michael_drivers = CarOwner.objects.filter(first_name=\"Michael\") for driver in michael_drivers: print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.birth_date}\") print(\"--------------------\") \u0414\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0430\u0432 \u043f\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0434\u0432\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 CarOwner.objects.get \u0438 DriverLicense.objects.filter . driver = CarOwner.objects.get(first_name=\"Sarah\") print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.birth_date}\") print(\"--------------------\") driver_licenses = DriverLicense.objects.filter(owner=driver) for license in driver_licenses: print(f\"License Number: {license.number}\") print(f\"License Type: {license.type_id}\") print(f\"Issue Date: {license.issue_date}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter . red_cars = Car.objects.filter(color=\"Red\") for car in red_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043b\u0430\u0434\u0435\u044e\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 2023 \u0433\u043e\u0434\u0430 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter . target_year = 2023 owners_with_cars_from_year = CarOwner.objects.filter( carownership__start_date__year=target_year ).distinct() for owner in owners_with_cars_from_year: print(f\"Owner Name: {owner.first_name}\") print(f\"Date of Birth: {owner.birth_date}\") print(\"--------------------\") \u0417\u0430\u0434\u0430\u043d\u0438\u0435 #3 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f. oldest_license = DriverLicense.objects.order_by(\"issue_date\").first() print(f\"License Number: {oldest_license.number}\") \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435. oldest_ownership = CarOwnership.objects.order_by(\"start_date\").first() print(f\"Oldest ownership: {oldest_ownership.start_date}\") \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f. owners_with_car_count = CarOwner.objects.annotate(car_count=Count(\"carownership\")) for owner in owners_with_car_count: print(f\"Owner Name: {owner.first_name}\") print(f\"Number of cars: {owner.car_count}\") print(\"--------------------\") \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438. cars_by_model = Car.objects.values(\"model\").annotate(car_count=Count(\"carownership\")) for car in cars_by_model: print(f\"Car Model: {car['model']}\") print(f\"Number of cars: {car['car_count']}\") print(\"--------------------\") \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f. owners_by_license_issue_date = CarOwner.objects.order_by(\"driverlicense__issue_date\") for owner in owners_by_license_issue_date: print(f\"Owner Name: {owner.first_name}\") print(\"--------------------\")","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #3.1"},{"location":"pract-3-1/#31","text":"","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 #3.1"},{"location":"pract-3-1/#1","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c 6 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.create . \u0414\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u044b \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 owners_data . # Create 6 car owners owners_data = [ { \"first_name\": \"Michael\", \"last_name\": \"Johnson\", }, { \"first_name\": \"Sarah\", \"last_name\": \"Williams\", }, { \"first_name\": \"David\", \"last_name\": \"Brown\", }, { \"first_name\": \"Emily\", \"last_name\": \"Davis\", }, { \"first_name\": \"Matthew\", \"last_name\": \"Robinson\", }, { \"first_name\": \"Olivia\", \"last_name\": \"Martinez\", }, ] owners = [CarOwner.objects.create(**data) for data in owners_data] \u0422\u0435\u043f\u0435\u0440\u044c \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u043c \u0438\u0445 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e. # Create 6 cars cars_data = [ {\"number\": \"PQR789\", \"model\": \"Audi\", \"color\": \"Black\"}, {\"number\": \"STU012\", \"model\": \"Mercedes\", \"color\": \"Red\"}, {\"number\": \"VWX345\", \"model\": \"Volkswagen\", \"color\": \"Gray\"}, {\"number\": \"YZA678\", \"model\": \"Subaru\", \"color\": \"Blue\"}, {\"number\": \"BCD901\", \"model\": \"Volvo\", \"color\": \"Silver\"}, {\"number\": \"EFG234\", \"model\": \"Tesla\", \"color\": \"White\"}, ] for data in cars_data: Car.objects.create(**data) # Assign 1 to 3 cars for each owner for owner, car in zip(CarOwner.objects.all(), Car.objects.all()): CarOwnership.objects.create( owner=owner, car=car, start_date=timezone.now(), end_date=timezone.now() + timedelta(days=365), ) \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0430\u0432\u0430 \u0434\u043b\u044f \u0432\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f. # Create driver's licenses for each owner licenses_data = [ { \"owner\": owner, \"number\": f\"DL{index + 1}\", \"type_id\": \"A\", \"issue_date\": timezone.now(), } for index, owner in enumerate(owners) ] for data in licenses_data: DriverLicense.objects.create(**data) \u0412\u0435\u0441\u044c \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0441\u043a\u0440\u0438\u043f\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439: python3 manage.py shell < 3.1/task1.py","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 #1"},{"location":"pract-3-1/#2","text":"\u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0413\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438 \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435) \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430) \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435) \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043c\u0430\u0440\u043a\u0438 Tesla \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter . tesla_cars = Car.objects.filter(model=\"Tesla\") for car in tesla_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"Michael\" \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter . michael_drivers = CarOwner.objects.filter(first_name=\"Michael\") for driver in michael_drivers: print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.birth_date}\") print(\"--------------------\") \u0414\u043b\u044f \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u0440\u0430\u0432 \u043f\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043c \u0434\u0432\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 CarOwner.objects.get \u0438 DriverLicense.objects.filter . driver = CarOwner.objects.get(first_name=\"Sarah\") print(f\"Driver Name: {driver.first_name}\") print(f\"Date of Birth: {driver.birth_date}\") print(\"--------------------\") driver_licenses = DriverLicense.objects.filter(owner=driver) for license in driver_licenses: print(f\"License Number: {license.number}\") print(f\"License Type: {license.type_id}\") print(f\"Issue Date: {license.issue_date}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c Car.objects.filter . red_cars = Car.objects.filter(color=\"Red\") for car in red_cars: print(f\"Car Number: {car.number}\") print(f\"Model: {car.model}\") print(f\"Color: {car.color}\") print(\"--------------------\") \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u043b\u0430\u0434\u0435\u044e\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u043c \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 2023 \u0433\u043e\u0434\u0430 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c CarOwner.objects.filter . target_year = 2023 owners_with_cars_from_year = CarOwner.objects.filter( carownership__start_date__year=target_year ).distinct() for owner in owners_with_cars_from_year: print(f\"Owner Name: {owner.first_name}\") print(f\"Date of Birth: {owner.birth_date}\") print(\"--------------------\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 #2"},{"location":"pract-3-1/#3","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435 \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u0434\u043d\u0438 \u0438 \u0442\u0435 \u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c \u043c\u0435\u0442\u043e\u0434\u043e\u043c .distinct() \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f. oldest_license = DriverLicense.objects.order_by(\"issue_date\").first() print(f\"License Number: {oldest_license.number}\") \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435. oldest_ownership = CarOwnership.objects.order_by(\"start_date\").first() print(f\"Oldest ownership: {oldest_ownership.start_date}\") \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f. owners_with_car_count = CarOwner.objects.annotate(car_count=Count(\"carownership\")) for owner in owners_with_car_count: print(f\"Owner Name: {owner.first_name}\") print(f\"Number of cars: {owner.car_count}\") print(\"--------------------\") \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438. cars_by_model = Car.objects.values(\"model\").annotate(car_count=Count(\"carownership\")) for car in cars_by_model: print(f\"Car Model: {car['model']}\") print(f\"Number of cars: {car['car_count']}\") print(\"--------------------\") \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f. owners_by_license_issue_date = CarOwner.objects.order_by(\"driverlicense__issue_date\") for owner in owners_by_license_issue_date: print(f\"Owner Name: {owner.first_name}\") print(\"--------------------\")","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 #3"}]}